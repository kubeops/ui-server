/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package go.openviz.dev.grafana_tools.apis.openviz.v1alpha1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "kmodules.xyz/client-go/api/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// GrafanaConfiguration defines configuration for a Grafana AppBinding
message GrafanaConfiguration {
  // Datasource defines the Grafana datasource name.
  // +optional
  optional string datasource = 1;

  // FolderID defines the Grafana folder id.
  // +optional
  optional int64 folderID = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=grafanadashboards,singular=grafanadashboard,categories={grafana,openviz,appscode}
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
message GrafanaDashboard {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional GrafanaDashboardSpec spec = 2;

  optional GrafanaDashboardStatus status = 3;
}

message GrafanaDashboardList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated GrafanaDashboard items = 2;
}

message GrafanaDashboardReference {
  optional int64 id = 1;

  optional string uid = 2;

  optional int64 orgID = 3;

  optional string title = 4;

  optional string url = 5;

  optional int64 version = 6;
}

message GrafanaDashboardSpec {
  // GrafanaRef defines the grafana app binding name for the GrafanaDashboard
  // +optional
  optional kmodules.xyz.client_go.api.v1.ObjectReference grafanaRef = 1;

  // FolderID defines the Grafana folderID
  // +optional
  optional int64 folderID = 2;

  // +optional
  // +kubebuilder:pruning:PreserveUnknownFields
  optional k8s.io.apimachinery.pkg.runtime.RawExtension model = 3;

  // Overwrite defines the existing grafanadashboard with the same name(if any) should be overwritten or not
  // +optional
  optional bool overwrite = 4;

  // Templatize defines the fields which supports templating in GrafanaDashboard Model json
  // +optional
  optional ModelTemplateConfiguration templatize = 5;
}

message GrafanaDashboardStatus {
  // ObservedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;

  // Phase indicates the state this Vault cluster jumps in.
  // +optional
  optional string phase = 2;

  // The reason for the current phase
  // +optional
  optional string reason = 3;

  // Dashboard indicates the updated grafanadashboard database
  // +optional
  optional GrafanaDashboardReference dashboard = 4;

  // Represents the latest available observations of a GrafanaDashboard current state.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 5;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=grafanadashboardtemplates,singular=grafanadashboardtemplate,scope=Cluster,categories={grafana,openviz,appscode}
// +kubebuilder:subresource:status
message GrafanaDashboardTemplate {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional GrafanaDashboardTemplateSpec spec = 2;
}

message GrafanaDashboardTemplateList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated GrafanaDashboardTemplate items = 2;
}

message GrafanaDashboardTemplateReference {
  optional int64 id = 1;

  optional string uid = 2;

  optional string title = 3;

  repeated string tags = 4;

  optional string timezone = 5;

  optional int64 schemaVersion = 6;

  optional int64 version = 7;
}

message GrafanaDashboardTemplateSpec {
  optional GrafanaDashboardTemplateReference grafanadashboardtemplate = 1;

  optional int64 folderID = 2;

  optional bool overwrite = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=grafanadatasources,singular=grafanadatasource,categories={grafana,openviz,appscode}
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
message GrafanaDatasource {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional GrafanaDatasourceSpec spec = 2;

  optional GrafanaDatasourceStatus status = 3;
}

message GrafanaDatasourceList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated GrafanaDatasource items = 2;
}

message GrafanaDatasourceSpec {
  optional kmodules.xyz.client_go.api.v1.ObjectReference grafanaRef = 1;

  optional int64 id = 2;

  optional int64 orgId = 3;

  optional string name = 4;

  optional string type = 5;

  optional string access = 6;

  optional string url = 7;

  optional string password = 8;

  optional string user = 9;

  optional string database = 10;

  optional bool basicAuth = 11;

  optional string basicAuthUser = 12;

  optional string basicAuthPassword = 13;

  optional bool isDefault = 14;

  optional bool editable = 15;
}

message GrafanaDatasourceStatus {
  // ObservedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;

  optional int64 grafanadatasourceID = 2;

  optional string phase = 3;

  optional string reason = 4;

  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 5;
}

message ModelTemplateConfiguration {
  optional bool title = 1;

  optional bool datasource = 2;
}

